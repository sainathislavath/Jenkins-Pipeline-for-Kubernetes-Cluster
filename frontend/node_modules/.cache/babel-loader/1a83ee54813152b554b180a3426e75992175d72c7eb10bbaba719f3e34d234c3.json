{"ast":null,"code":"import axios from'axios';// API base URLs for each microservice\nconst API_GATEWAYS={user:process.env.REACT_APP_USER_SERVICE_URL,product:process.env.REACT_APP_PRODUCT_SERVICE_URL,cart:process.env.REACT_APP_CART_SERVICE_URL,order:process.env.REACT_APP_ORDER_SERVICE_URL};// Create axios instances for each service\nconst createApiInstance=baseURL=>{const instance=axios.create({baseURL,timeout:10000});// Add auth token to requests\ninstance.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>Promise.reject(error));// Handle auth errors\ninstance.interceptors.response.use(response=>response,error=>{var _error$response;if(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){localStorage.removeItem('token');localStorage.removeItem('user');window.location.href='/login';}return Promise.reject(error);});return instance;};// API instances\nexport const userApi=createApiInstance(API_GATEWAYS.user);export const productApi=createApiInstance(API_GATEWAYS.product);export const cartApi=createApiInstance(API_GATEWAYS.cart);export const orderApi=createApiInstance(API_GATEWAYS.order);// User Service APIs\nexport const authService={register:data=>userApi.post('/api/auth/register',data),login:data=>userApi.post('/api/auth/login',data),getProfile:()=>userApi.get('/api/auth/me'),updateProfile:data=>userApi.put('/api/users/profile',data)};// Product Service APIs\nexport const productService={getProducts:params=>productApi.get('/api/products',{params}),getProduct:id=>productApi.get(`/api/products/${id}`),getCategories:()=>productApi.get('/api/categories'),createProduct:data=>productApi.post('/api/products',data),updateProduct:(id,data)=>productApi.put(`/api/products/${id}`,data),deleteProduct:id=>productApi.delete(`/api/products/${id}`)};// Cart Service APIs\nexport const cartService={getCart:userId=>cartApi.get(`/api/cart/${userId}`),addToCart:(userId,data)=>cartApi.post(`/api/cart/${userId}/items`,data),updateCartItem:(userId,productId,data)=>cartApi.put(`/api/cart/${userId}/items/${productId}`,data),removeFromCart:(userId,productId)=>cartApi.delete(`/api/cart/${userId}/items/${productId}`),clearCart:userId=>cartApi.delete(`/api/cart/${userId}`),validateCart:userId=>cartApi.post(`/api/cart/${userId}/validate`)};// Order Service APIs\nexport const orderService={getUserOrders:(userId,params)=>orderApi.get(`/api/orders/user/${userId}`,{params}),getOrder:id=>orderApi.get(`/api/orders/${id}`),createOrder:data=>orderApi.post('/api/orders',data),updateOrderStatus:(id,data)=>orderApi.put(`/api/orders/${id}/status`,data),cancelOrder:(id,data)=>orderApi.delete(`/api/orders/${id}`,{data}),processPayment:data=>orderApi.post('/api/payments/process',data),getPaymentDetails:orderId=>orderApi.get(`/api/payments/order/${orderId}`)};// Helper function to handle API errors\nexport const handleApiError=error=>{if(error.response){// Server responded with error status\nreturn error.response.data.message||'An error occurred';}else if(error.request){// Request was made but no response received\nreturn'Network error. Please check your connection.';}else{// Something else happened\nreturn'An unexpected error occurred';}};","map":{"version":3,"names":["axios","API_GATEWAYS","user","process","env","REACT_APP_USER_SERVICE_URL","product","REACT_APP_PRODUCT_SERVICE_URL","cart","REACT_APP_CART_SERVICE_URL","order","REACT_APP_ORDER_SERVICE_URL","createApiInstance","baseURL","instance","create","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","userApi","productApi","cartApi","orderApi","authService","register","data","post","login","getProfile","get","updateProfile","put","productService","getProducts","params","getProduct","id","getCategories","createProduct","updateProduct","deleteProduct","delete","cartService","getCart","userId","addToCart","updateCartItem","productId","removeFromCart","clearCart","validateCart","orderService","getUserOrders","getOrder","createOrder","updateOrderStatus","cancelOrder","processPayment","getPaymentDetails","orderId","handleApiError","message"],"sources":["E:/E-CommerceStore/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// API base URLs for each microservice\r\nconst API_GATEWAYS = {\r\n  user: process.env.REACT_APP_USER_SERVICE_URL,\r\n  product: process.env.REACT_APP_PRODUCT_SERVICE_URL,\r\n  cart: process.env.REACT_APP_CART_SERVICE_URL,\r\n  order: process.env.REACT_APP_ORDER_SERVICE_URL,\r\n};\r\n\r\n// Create axios instances for each service\r\nconst createApiInstance = (baseURL) => {\r\n  const instance = axios.create({\r\n    baseURL,\r\n    timeout: 10000,\r\n  });\r\n\r\n  // Add auth token to requests\r\n  instance.interceptors.request.use(\r\n    (config) => {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        config.headers.Authorization = `Bearer ${token}`;\r\n      }\r\n      return config;\r\n    },\r\n    (error) => Promise.reject(error)\r\n  );\r\n\r\n  // Handle auth errors\r\n  instance.interceptors.response.use(\r\n    (response) => response,\r\n    (error) => {\r\n      if (error.response?.status === 401) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        window.location.href = '/login';\r\n      }\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  return instance;\r\n};\r\n\r\n// API instances\r\nexport const userApi = createApiInstance(API_GATEWAYS.user);\r\nexport const productApi = createApiInstance(API_GATEWAYS.product);\r\nexport const cartApi = createApiInstance(API_GATEWAYS.cart);\r\nexport const orderApi = createApiInstance(API_GATEWAYS.order);\r\n\r\n// User Service APIs\r\nexport const authService = {\r\n  register: (data) => userApi.post('/api/auth/register', data),\r\n  login: (data) => userApi.post('/api/auth/login', data),\r\n  getProfile: () => userApi.get('/api/auth/me'),\r\n  updateProfile: (data) => userApi.put('/api/users/profile', data),\r\n};\r\n\r\n// Product Service APIs\r\nexport const productService = {\r\n  getProducts: (params) => productApi.get('/api/products', { params }),\r\n  getProduct: (id) => productApi.get(`/api/products/${id}`),\r\n  getCategories: () => productApi.get('/api/categories'),\r\n  createProduct: (data) => productApi.post('/api/products', data),\r\n  updateProduct: (id, data) => productApi.put(`/api/products/${id}`, data),\r\n  deleteProduct: (id) => productApi.delete(`/api/products/${id}`),\r\n};\r\n\r\n// Cart Service APIs\r\nexport const cartService = {\r\n  getCart: (userId) => cartApi.get(`/api/cart/${userId}`),\r\n  addToCart: (userId, data) => cartApi.post(`/api/cart/${userId}/items`, data),\r\n  updateCartItem: (userId, productId, data) => \r\n    cartApi.put(`/api/cart/${userId}/items/${productId}`, data),\r\n  removeFromCart: (userId, productId) => \r\n    cartApi.delete(`/api/cart/${userId}/items/${productId}`),\r\n  clearCart: (userId) => cartApi.delete(`/api/cart/${userId}`),\r\n  validateCart: (userId) => cartApi.post(`/api/cart/${userId}/validate`),\r\n};\r\n\r\n// Order Service APIs\r\nexport const orderService = {\r\n  getUserOrders: (userId, params) => \r\n    orderApi.get(`/api/orders/user/${userId}`, { params }),\r\n  getOrder: (id) => orderApi.get(`/api/orders/${id}`),\r\n  createOrder: (data) => orderApi.post('/api/orders', data),\r\n  updateOrderStatus: (id, data) => orderApi.put(`/api/orders/${id}/status`, data),\r\n  cancelOrder: (id, data) => orderApi.delete(`/api/orders/${id}`, { data }),\r\n  processPayment: (data) => orderApi.post('/api/payments/process', data),\r\n  getPaymentDetails: (orderId) => orderApi.get(`/api/payments/order/${orderId}`),\r\n};\r\n\r\n// Helper function to handle API errors\r\nexport const handleApiError = (error) => {\r\n  if (error.response) {\r\n    // Server responded with error status\r\n    return error.response.data.message || 'An error occurred';\r\n  } else if (error.request) {\r\n    // Request was made but no response received\r\n    return 'Network error. Please check your connection.';\r\n  } else {\r\n    // Something else happened\r\n    return 'An unexpected error occurred';\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}